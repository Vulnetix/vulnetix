generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "omitApi"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Session {
  kid         String  @id
  orgId       String
  org         Org     @relation(fields: [orgId], references: [uuid])
  memberEmail String
  member      Member  @relation(fields: [memberEmail], references: [email])
  expiry      Int
  issued      Int
  secret      String?
  authn_ip    String?
  authn_ua    String?
}

model Org {
  uuid                  String                @id @default(uuid())
  name                  String
  members               Member[]
  sessions              Session[]
  git_repos             GitRepo[]
  integrations          IntegrationConfig[]
  integration_usage_log IntegrationUsageLog[]
  findings              Finding[]
  sarif                 SARIFInfo[]
  cdx                   CycloneDXInfo[]
  spdx                  SPDXInfo[]
}

model IntegrationConfig {
  uuid       String  @id @default(uuid())
  orgId      String
  org        Org     @relation(fields: [orgId], references: [uuid])
  name       String
  label      String?
  created    Int
  suspend    Int?    @default(0)
  configJSON String?
}

model Member {
  uuid                  String                @id @default(uuid())
  email                 String                @unique
  orgId                 String
  org                   Org                   @relation(fields: [orgId], references: [uuid])
  passwordHash          String
  avatarUrl             String?
  firstName             String?
  lastName              String?
  alertNews             Int                   @default(0)
  alertOverdue          Int                   @default(0)
  alertFindings         Int                   @default(0)
  alertType             Int                   @default(0)
  sarif                 SARIFInfo[]
  github_apps           GitHubApp[]
  repos                 GitRepo[]
  member_keys           MemberKey[]
  sessions              Session[]
  spdx                  SPDXInfo[]
  integration_usage_log IntegrationUsageLog[]
  findings              Finding[]
  triage_activity       Triage[]
  cdx                   CycloneDXInfo[]
}

model MemberKey {
  id          Int        @id @default(autoincrement())
  memberEmail String
  keyLabel    String?
  keyType     String
  member      Member     @relation(fields: [memberEmail], references: [email])
  secret      String
  suspend     Int        @default(0)
  githubPat   GitHubPAT?

  @@unique([memberEmail, secret])
}

model GitHubPAT {
  keyId     Int       @id
  memberKey MemberKey @relation(fields: [keyId], references: [id])
  login     String
  expires   Int
  created   Int
  avatarUrl String?
}

model GitHubApp {
  installationId Int     @id
  memberEmail    String
  member         Member  @relation(fields: [memberEmail], references: [email])
  accessToken    String
  login          String?
  created        Int
  expires        Int?
  avatarUrl      String?
}

model GitRepo {
  fullName      String
  orgId         String
  org           Org             @relation(fields: [orgId], references: [uuid])
  ghid          Int?
  source        String
  createdAt     Int
  updatedAt     Int
  pushedAt      Int
  defaultBranch String
  ownerId       Int
  memberEmail   String
  member        Member          @relation(fields: [memberEmail], references: [email])
  licenseSpdxId String?
  licenseName   String?
  fork          Int             @default(0)
  template      Int             @default(0)
  archived      Int             @default(0)
  visibility    String
  avatarUrl     String?
  sarif         SARIFInfo[]
  spdx          SPDXInfo[]
  cdx           CycloneDXInfo[]
  Finding       Finding[]

  @@id([fullName, orgId])
}

model SARIFInfo {
  reportId     String         @id
  sarifId      String
  fullName     String?
  repo         GitRepo?       @relation(fields: [fullName, orgId], references: [fullName, orgId])
  orgId        String
  org          Org            @relation(fields: [orgId], references: [uuid])
  source       String
  memberEmail  String
  member       Member         @relation(fields: [memberEmail], references: [email])
  artifactUuid String
  artifact     Artifact       @relation(fields: [artifactUuid], references: [uuid])
  commitSha    String?
  ref          String?
  createdAt    Int
  resultsCount Int
  rulesCount   Int
  toolName     String?
  toolVersion  String?
  analysisKey  String?
  warning      String?
  results      SarifResults[]
}

model SarifResults {
  guid                String    @id
  reportId            String
  sarif               SARIFInfo @relation(fields: [reportId], references: [reportId])
  messageText         String
  ruleId              String
  locations           String?
  automationDetailsId String?
  rulesetName         String?
  level               String?
  description         String?
  helpMarkdown        String?
  securitySeverity    String?
  precision           String?
  tags                String?
}

model CycloneDXInfo {
  cdxId                   String   @id
  source                  String
  memberEmail             String
  member                  Member   @relation(fields: [memberEmail], references: [email])
  orgId                   String
  org                     Org      @relation(fields: [orgId], references: [uuid])
  repoName                String?
  repo                    GitRepo? @relation(fields: [repoName, orgId], references: [fullName, orgId])
  artifactUuid            String
  artifact                Artifact @relation(fields: [artifactUuid], references: [uuid])
  cdxVersion              String
  serialNumber            String?
  name                    String?
  version                 String?
  createdAt               Int
  toolName                String?
  externalReferencesCount Int
  componentsCount         Int
  dependenciesCount       Int

  findings Finding[]
}

model SPDXInfo {
  spdxId            String    @id
  source            String
  memberEmail       String
  member            Member    @relation(fields: [memberEmail], references: [email])
  orgId             String
  org               Org       @relation(fields: [orgId], references: [uuid])
  repoName          String?
  repo              GitRepo?  @relation(fields: [repoName, orgId], references: [fullName, orgId])
  artifactUuid      String
  artifact          Artifact  @relation(fields: [artifactUuid], references: [uuid])
  spdxVersion       String
  dataLicense       String?
  name              String?
  documentNamespace String?
  createdAt         Int
  toolName          String?
  documentDescribes String?
  packagesCount     Int
  comment           String?
  findings          Finding[]
}

model IntegrationUsageLog {
  id          Int     @id @default(autoincrement())
  orgId       String
  org         Org     @relation(fields: [orgId], references: [uuid])
  memberEmail String
  source      String
  member      Member  @relation(fields: [memberEmail], references: [email])
  request     String
  response    String?
  statusCode  Int
  createdAt   Int
}

model Finding {
  uuid                       String         @id @default(uuid())
  findingId                  String
  orgId                      String
  org                        Org            @relation(fields: [orgId], references: [uuid])
  memberEmail                String
  member                     Member         @relation(fields: [memberEmail], references: [email])
  repoName                   String?
  repo                       GitRepo?       @relation(fields: [repoName, memberEmail], references: [fullName, orgId])
  source                     String
  category                   String
  createdAt                  Int
  modifiedAt                 Int
  publishedAt                Int?
  detectionTitle             String
  purl                       String?
  cpe                        String?
  databaseReviewed           Int?
  cve                        String?
  aliases                    String?
  cwes                       String?
  packageName                String
  packageVersion             String?
  packageLicense             String?
  vendor                     String?
  product                    String?
  packageEcosystem           String?
  sourceCodeUrl              String?
  exploitsJSON               String?
  knownExploitsJSON          String?
  cisaDateAdded              Int?
  knownRansomwareCampaignUse String?
  fixVersion                 String?
  fixAutomatable             Int?
  vulnerableVersionRange     String?
  malicious                  Int?
  abandoned                  Int?
  squattedPackage            String?
  referencesJSON             String?
  timelineJSON               String?
  spdxId                     String?
  spdx                       SPDXInfo?      @relation(fields: [spdxId], references: [spdxId])
  cdxId                      String?
  cdx                        CycloneDXInfo? @relation(fields: [cdxId], references: [cdxId])
  triage                     Triage[]
}

model Triage {
  uuid                  String    @id @default(uuid())
  artifactUuid          String?
  artifact              Artifact? @relation(fields: [artifactUuid], references: [uuid])
  findingUuid           String
  finding               Finding   @relation(fields: [findingUuid], references: [uuid])
  createdAt             Int
  triagedAt             Int?
  lastObserved          Int
  seen                  Int
  seenAt                Int?
  cvssVector            String?
  cvssScore             String?
  epssPercentile        String?
  epssScore             String?
  ssvc                  String?
  remediation           String?
  analysisState         String
  analysisJustification String?
  analysisResponse      String?
  analysisDetail        String?
  triageAutomated       Int       @default(0)
  memberEmail           String?
  member                Member?   @relation(fields: [memberEmail], references: [email])
}

// model Lifecycle {
//   uuid  String   @id @default(uuid())
//   event String // list enum String
//   date  DateTime
//   Collection     Collection? @relation(fields: [collectionUuid], references: [uuid])
//   collectionUuid String?
//   Leaf           Leaf?       @relation(fields: [leafUuid], references: [uuid])
//   leafUuid       String?
//   Product        Product?    @relation(fields: [productUuid], references: [uuid])
//   productUuid    String?
// }

model Link {
  id           Int       @id @default(autoincrement())
  url          String
  contentType  String // OCI PLAIN_JSON OCTET_STREAM PLAIN_XML
  artifact     Artifact? @relation(fields: [artifactUuid], references: [uuid])
  artifactUuid String?
}

model Artifact {
  uuid          String          @id @default(uuid())
  // displayIdentifier String
  type          String // BOM ATTESTATION VDR VEX OTHER
  date          Int
  bomFormat     String
  downloadLinks Link[]
  // inventoryTypes    String // SOFTWARE HARDWARE CRYPTOGRAPHY SERVICE VULNERABILITY
  // identities        Identity[]
  // Collection        Collection? @relation(fields: [collectionUuid], references: [uuid])
  // collectionUuid    String?
  sarif         SARIFInfo[]
  cdx           CycloneDXInfo[]
  spdx          SPDXInfo[]
  vex           Triage[]
}

// model Identity {
//   id             String      @id @default(cuid())
//   type           String
//   identifier     String
//   Artifact       Artifact?   @relation(fields: [artifactUuid], references: [uuid])
//   artifactUuid   String?
//   Collection     Collection? @relation(fields: [collectionUuid], references: [uuid])
//   collectionUuid String?
// }

// model Collection {
//   uuid       String      @id @default(uuid())
//   version    String?
//   created    Int
//   identities Identity[]
//   artifacts  Artifact[]
//   lifecycle  Lifecycle[]
// }

// model Leaf {
//   uuid        String      @id @default(uuid())
//   name        String
//   tei         String      @unique
//   version     String
//   lifecycle   Lifecycle[]
//   Product     Product?    @relation(fields: [productUuid], references: [uuid])
//   productUuid String?
// }

// model Product {
//   uuid      String      @id @default(uuid())
//   name      String
//   lifecycle Lifecycle[]
//   leafs     Leaf[]
// }
