name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build binaries
        run: |
          export VERSION=${{ steps.version.outputs.VERSION }}
          ./build.sh

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vulnetix-binaries-${{ steps.version.outputs.VERSION }}
          path: bin/

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: bin/*
          generate_release_notes: true
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-action:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: vulnetix-binaries-${{ needs.build.outputs.VERSION || 'dev' }}
          path: bin/

      - name: Make binaries executable
        run: chmod +x bin/*

      - name: Test action with valid UUID
        uses: ./
        with:
          org-id: '123e4567-e89b-12d3-a456-426614174000'

      - name: Test action with invalid UUID (should fail)
        id: test-invalid
        continue-on-error: true
        uses: ./
        with:
          org-id: 'invalid-uuid'

      - name: Verify invalid UUID test failed
        if: steps.test-invalid.outcome == 'success'
        run: |
          echo "Test should have failed with invalid UUID"
          exit 1
